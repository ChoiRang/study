# -*- coding: utf-8 -*-
"""22-02-09 빅데이터 미니프로젝트_문제_1_제공-do.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1II8bTNAIzkwhwpQiSLvqdNsH0YYp0F3o

# 피자집 주문데이터를 분석하세요
"""

url_area = "https://raw.githubusercontent.com/KimYounghwan/bigdata/master/m_area.csv"
url_store = "https://raw.githubusercontent.com/KimYounghwan/bigdata/master/m_store.csv"
url_order_202104 = "https://raw.githubusercontent.com/KimYounghwan/bigdata/master/tbl_order_202104.csv"
url_order_202105 = "https://raw.githubusercontent.com/KimYounghwan/bigdata/master/tbl_order_202105.csv"
url_order_202106 = "https://raw.githubusercontent.com/KimYounghwan/bigdata/master/tbl_order_202106.csv"

# 코랩 한글 적용
#!sudo apt-get install -y fonts-nanum
#!sudo fc-cache -fv
#!rm ~/.cache/matplotlib -rf

# 코랩 한글 적용 후 런타임 재시작
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

plt.rc('font', family='NanumBarunGothic')
plt.rc('axes', unicode_minus=False)

# url_area를 읽어 area에 저장, 출력하세요
area = pd.read_csv(url_area)
area

# area 길이를 출력하세요
len(area)

# url_store를 읽어 store에 저장, 출력하세요
store = pd.read_csv(url_store)
store

# store의 길이를 출력하세요
len(store)

# url_order_202104를 읽어 order_202104에 저장, 출력하세요
'''
order_id 주문id
store_id 매장id
customer_id 고객id
coupon_cd 쿠폰
sales_detail_id 상세주문id
order_accept_date 주문일시
delivered_date 배달완료일시
takeout_flag 주문형태  1이면 "takeout" , 0이면 "delivery"
total_amount 총주문액(매출)
status 주문최종상태 0: '주문 접수' 1:'지불 완료' 2:'배달 완료' 9:'주문 취소'
'''
order_202104 = pd.read_csv(url_order_202104)
order_202104

# order_202104의 행 길이를 출력하세요
len(order_202104)

# url_order_202105를 읽어 order_202105에 저장, 출력하세요
order_202105 = pd.read_csv(url_order_202105)
order_202105

# order_202105의 행 길이를 출력하세요
len(order_202105)

# url_order_202106를 읽어 order_202106에 저장, 출력하세요
order_202106 = pd.read_csv(url_order_202106)
order_202106

# order_202106의 행 길이를 출력하세요
len(order_202106)

# order_202104, order_202105, order_202106를 수직결합하여 order_all에 저장, 출력하세요
order_all = pd.DataFrame()
order_all = order_202104.append(order_202105, ignore_index=True)
order_all = order_all.append(order_202106, ignore_index=True)
order_all

# order_all의 행 길이를 출력하세요

# 칼럼별 결측치 갯수를 출력하세요

order_all.isna().sum()

# order_all의 구조를 출력하세요

order_all.info()

# order_all의 수치형 칼럼의 기본 통계량을 출력하세요
order_all.describe()

# order_all의 문자열 칼럼의 기본 통계량을 출력하세요

order_all.describe(include='object')

# order_all와 store_id는 매장id이고 매장id에 대한 매장이름은 store의 store_name에 저장되어있다.
# order_all와 store를 수평연결하여 order_all에 저장하세요
order_all = order_all.merge(store, on='store_id')
order_all.head()

# order_all와 area를 수평연결하여 order_all에 저장하세요
order_all = order_all.merge(area, on='area_cd')
order_all.head()

order_all

order_all['takeout_flag']

# takeout_name 칼럼 추가한다. 
# takeout_flag = 1이면 takeout_name에 "takeout",
# takeout_flag = 0이면 takeout_name에 "delivery"를 저장한다.

#order_all.iloc(order_all[order_all['takeout_flag'] == 1].index)
order_all['takeout_flag'] = order_all['takeout_flag'].replace([0, 1], ['delivery', 'takeout'])

order_all

# status가 0이면 status_name에 '주문 접수', 
# status가 1이면 status_name에 '지불 완료', 
# status가 2이면 status_name에 '배달 완료', 
# status가 9이면 status_name에 '주문 취소'저장한다

order_all['status'] = order_all['status'].replace([0, 1, 2, 9],['주문 접수', '지불 완료', '배달 완료', '주문 취소'])
order_all

# order_all을 "order_all.csv"에 저장하세요
order_all.to_csv('order_all.csv', index=False)

order_all.info()

# delivered_date 칼럼을 datetime 타입으로 변환하여 delivered_date 칼럼에 저장한다.
order_all['delivered_date'] = pd.to_datetime(order_all['delivered_date'])
# delivered_date칼럼에서 년월(YYYYMM)을 추출하여 delivered_month칼럼에 저장한다.
order_all['delivered_month'] = order_all['delivered_date'].apply(lambda x:x.strftime('%Y%m'))
# delivered_date 칼럼과 delivered_month 칼럼만 추출하여 앞부분 5줄만 출력한다
order_all[['delivered_date', 'delivered_month']].head()

# '주문 취소' 제외한 
# 월별(delivered_month) 매출(total_amount)의 갯수와 총합과 평균을 출력한다

order_all.loc[order_all['status'] != '주문 취소'].pivot_table(
    index = 'delivered_month',
    values = 'total_amount',
    aggfunc = ['count', 'sum', 'mean']
)



# 월별(delivered_month) 매출(total_amount)의 총합을 선그래프로 출력하시오
order_all.pivot_table(
    index = 'delivered_month',
    values = 'total_amount',
    aggfunc = 'count'
).plot()

# 월별(delivered_month) 매출(total_amount)의 평균의 선그래프로 출력하시오
order_all.pivot_table(
    index = 'delivered_month',
    values = 'total_amount'
).plot()

# 매출(total_amount)의 히스토그램을 출력하시오. 간격 갯수는 20개.
order_all['total_amount'].plot.hist()

# 월별(delivered_month) 지역(narrow_area) 별 매출(total_amount)평균을 출력

order_all.pivot_table(
    index = 'delivered_month',
    values = 'total_amount',
    columns = 'narrow_area'
)

# 월별(delivered_month) 지역(narrow_area) 별 매출(total_amount)평균을 선그래프로 출력하시오
order_all.pivot_table(
    index = 'delivered_month',
    values = 'total_amount',
    columns = 'narrow_area'
).plot()

# 시간별 지역(narrow_area) 별 매출(total_amount)평균을 선그래프로 출력하시오
order_all['delivered_hour'] = pd.DatetimeIndex(order_all['delivered_date']).hour

order_all.pivot_table(
    index = 'delivered_hour',
    values = 'total_amount',
    columns = 'narrow_area'
).plot()

# 매장(store_id)별 매출(total_amount)의 기본 통계(갯수,평균,중앙값,최대값, 최소값)를 출력하세요
order_all.pivot_table(
    index = 'store_id',
    values = 'total_amount',
    aggfunc = ['count', 'mean', 'median', 'max', 'min']
)

order_all.head()

order_all['weekofyear'] = pd.DatetimeIndex(order_all['delivered_date']).weekofyear

# 삼일대로점의 주단위 매출을 출력하세요( pandas.Series.dt.weekofyear: 연중 몇 째주 )

order_all[order_all['store_name'] == '삼일대로점'].pivot_table(
    index = 'weekofyear',
    values = 'total_amount',
    aggfunc = 'sum'
)

# 삼일대로점의 주단위 매출을 선그래프로 출력하세요
data_samil = order_all[order_all['store_name'] == '삼일대로점'].pivot_table(
    index = 'weekofyear',
    values = 'total_amount',
    aggfunc = 'sum'
)
data_samil.plot()

# 삼일대로점의 주단위 매출과 가장 비슷한 매출 패턴을 가진 매장과 
# 다른 매출 패턴을 가진 점을 추출하여 선그래프로 출력하세요
samil = order_all[order_all['store_name'] == '삼일대로점'].pivot_table(
    index = 'weekofyear',
    values = 'total_amount'
)

order_samil = order_all[order_all['store_name'].str.contains('삼일대로점')][['weekofyear', 'store_name', 'total_amount']]

order_other = order_all[~order_all['store_name'].str.contains('삼일대로점')][['weekofyear', 'store_name', 'total_amount']]

order_samil

samil = order_samil.pivot_table(
    index = 'store_name',
    values = 'total_amount',
    columns = 'weekofyear',
    aggfunc = 'sum'
)
samil

other = order_other.pivot_table(
    index = 'store_name',
    values = 'total_amount',
    columns = 'weekofyear',
    aggfunc = 'sum'
)
other

sales_pow = []
for idx in other.index:
  sales_pow.append(np.sum(pow(samil - other.loc[idx, :], 2), axis=1).iloc[0])

len(sales_pow)

#other.drop('매출차이제곱', axis=1, inplace=True)

other['매출차이제곱'] = sales_pow

data1 = other.sort_values(by='매출차이제곱').head()
data1

data1.drop('매출차이제곱', axis=1, inplace=True)
data1

plt.figure(figsize=(12, 10))
plt.plot(
    data_samil
)
plt.plot(
    data1.T
)
plt.legend()
plt.show()

# 다른 매출 패턴을 가진 점을 추출하여 선그래프로 출력하세요
data2 = other.sort_values(by='매출차이제곱', ascending=False).head()
data2

data2.drop('매출차이제곱', axis=1, inplace=True)

plt.figure(figsize=(12, 10))
plt.plot(
    data_samil,
    label = '삼일대로점'
)
plt.plot(
    data2.T
)
plt.legend()
plt.show()

# 평균 매출이 가장 높은 매장과 가장 낮은 매장과 매출평균을 추출하여 주단위 매출액을 선그래프로 그리시오

pk_check = order_all.pivot_table(
    index = 'store_name',
    values = 'total_amount',
    columns = 'weekofyear',
    aggfunc = 'mean'
)
pk_check

pk_check.iloc[0]

mean_price = []
for idx in range(0,194):
  mean_price.append(round(np.mean(pk_check.iloc[idx]), 2))
mean_price

pk_check['mean_price'] = mean_price



pk_low = pk_check.sort_values(by='mean_price').head(1)
pk_low.drop('mean_price', axis=1, inplace=True)
pk_low

pk_high = pk_check.sort_values(by='mean_price', ascending=False).head(1)
pk_high.drop('mean_price', axis=1, inplace=True)
pk_high

plt.figure(figsize=(12,10))
plt.plot(
    pk_low.T,
    label = pk_low.index[0]
)
plt.plot(
    pk_high.T,
    label = pk_high.index[0]
)
plt.legend()

# https://www.weather.go.kr/w/obs-climate/land/past-obs/obs-by-day.do?stn=108&yy=2021&mm=4&obs=1
# 위주소는 2021년 4월달 날씨 정보를 제공하는 페이지이다.
# 위주소를 이용하여 날씨정보를 추출하여 비온날과 안온날의 전체 평균 매출액을 바그래프로 출력하세요.
url="https://www.weather.go.kr/w/obs-climate/land/past-obs/obs-by-day.do?stn=108&yy=2021&mm=4&obs=1"
w = pd.read_html(url, encoding="utf-8")
w[1]

평균기온=[]
최고기온=[]
최저기온=[]
평균운량=[]
일강수량=[]
w_info=[]
for i in range(1, 10, 2): #날씨정보는 홀수번째 행에 저장중.
  day_weather = w[1].loc[i] #홀수번째행 추출
  for wt in day_weather : #홀수번째 행의 각 칼럼 추출
    if pd.isna(wt): # 칼럼에 값이 없으면 다음 칼럼으로
      continue
    w_info.append(wt) # 칼럼에 값이 있으면 w_info에 저장
    wt_sp = wt.split()
    평균기온.append(wt_sp[0].split(":")[1].split("℃")[0])
    최고기온.append(wt_sp[1].split(":")[1].split("℃")[0])
    최저기온.append(wt_sp[2].split(":")[1].split("℃")[0])
    평균운량.append(wt_sp[3].split(":")[1])
    일강수량.append(wt_sp[4].split(":")[1])
    일강수량 = [ "0" if rain.strip()=="" or rain.endswith("0.0mm") else rain.split("mm")[0] for rain in 일강수량 ]
    if debug: # 디버그 옵션이 True이면 중간 결과물 출력
      display(w_info)
      print("날씨정보 길이:",len(w_info))
      display("일강수량:",일강수량)