# -*- coding: utf-8 -*-
"""22-02-10 빅데이터 미니프로젝트_문제_2_제공-do.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dsUprKJmBfpFZ6WSvEXkWsmiNTrCpqbr

# 서울시 따릉이 자전거 2015년 대여량 데이터를 분석하세요
"""

# 코랩 한글 적용
!sudo apt-get install -y fonts-nanum
!sudo fc-cache -fv
!rm ~/.cache/matplotlib -rf

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
plt.rc('font', family='NanumBarunGothic')
plt.rc('axes', unicode_minus=False)

# 서울시 따릉이 자전거 2015년 대여량 데이터를 읽어 bicycle에 저장하세요
# 2015년 이후 데이터는 너무 커서 시간이 많이 걸림

filename="https://raw.githubusercontent.com/KimYounghwan/bigdata/master/%EC%84%9C%EC%9A%B8%ED%8A%B9%EB%B3%84%EC%8B%9C%20%EA%B3%B5%EA%B3%B5%EC%9E%90%EC%A0%84%EA%B1%B0%20%EB%8C%80%EC%97%AC%EC%9D%B4%EB%A0%A5%20%EC%A0%95%EB%B3%B4_2015%EB%85%84.csv"
bicycle = pd.read_csv(filename, encoding='euc-kr')

# bicycle의 구조를 출력하세요
bicycle.info()

# bicycle의 앞부분 5줄만 출력하시오
bicycle.head()

# 사용된 자전거 댓수를 출력하세요
len(bicycle['자전거번호'].unique())

# 대여일시의 종류의 갯수를 출력하세요.
len(bicycle['대여일시'].unique())

# 대여소의 갯수를 출력하세요.
len(bicycle['대여소번호'].unique())

# 전체 이용시간의 요약 통계량을 출력하세요
bicycle['이용시간'].describe()

# 전체 이용시간의 분포그래프을 출력하세요(간격갯수는100)
bicycle['이용시간'].plot.hist(bins=100)

# 전체 이용거리의 요약 통계량을 출력하세요
bicycle['이용거리'].describe()

# 전체 이용거리의 분포그래프을 출력하세요(간격갯수는100)
bicycle['이용거리'].plot.hist(bins=100)

# 대여일시칼럼을 datetime 타입으로 변환, 년,월,일, 시, 요일 칼럼으로 나누세요.
# 요일명은 Series.dt.day_name() 사용
# 앞부분 5줄만 출력하세요
date_on = pd.to_datetime(bicycle['대여일시'])

bicycle['year'] = pd.DatetimeIndex(date_on).year
bicycle['month'] = pd.DatetimeIndex(date_on).month
bicycle['day'] = pd.DatetimeIndex(date_on).day
bicycle['hour'] = pd.DatetimeIndex(date_on).hour
bicycle['week'] = date_on.dt.day_name()

bicycle.head()

# 월별 평균 대여건수를 출력하세요. 단, 칼럼명은 반드시 대여건수이어야한다.

df_month = bicycle.pivot_table(
    index = 'month',
    values = 'day',
    aggfunc = 'count'
)
df_month.rename({'day' : '대여건수'}, axis=1, inplace=True)
df_month

# 월별 평균 대여건수 선그래프를 출력하세요

plt.plot(
    df_month
)

# 월별 평균 이용거리 선그래프를 출력하세요
bicycle.pivot_table(
    index = 'month',
    values = '이용거리',
    aggfunc = 'mean'
).plot()

# 월별 평균 이용시간 선그래프를 출력하세요
bicycle.pivot_table(
    index = 'month',
    values = '이용시간',
    aggfunc = 'mean'
).plot()

# 요일 순서 지정
# 인덱스 순서 변경은 Series.reindex( ... ) 사용
weeks = ['Monday', 'Tuesday' ,'Wednesday' ,  'Thursday' ,'Friday','Saturday', 'Sunday']
weeks

# 요일별 대여건수 선그래프를 출력하세요
df_week = bicycle.pivot_table(
    index = 'week',
    values = 'day',
    aggfunc = 'count'
).reindex(weeks)
df_week.rename({'day' : '대여건수'}, axis=1, inplace=True)
df_week.plot()

# 요일별 평균 이용시간 선그래프를 출력하세요
df_week_use = bicycle.pivot_table(
    index = 'week',
    values = '이용시간',
    aggfunc = 'mean'
).reindex(weeks)

df_week_use.plot()

# 요일별 대여건수와 이용시간 선그래프를 같이 출력하세요
plt.plot(
    df_week,
    label = '대여건수'
)
plt.plot(
    df_week_use,
    label = '이용시간'
)
plt.legend()

# 자전거별 총대여건수 top 10의 막대그래프를 출력하세요

bicycle_rent =bicycle.pivot_table(
    index = '자전거번호',
    values = 'day',
    aggfunc = 'count'
).sort_values(by='day', ascending=False).head(10)

bicycle_rent.rename({'day' : '총대여건수'}, axis=1, inplace=True)

bicycle_rent.plot.bar()

# 자전거별 평균이용시간 top 10의 선그래프를 출력하세요
bicycle_time = bicycle.pivot_table(
    index = '자전거번호',
    values = '이용시간',
    aggfunc = 'mean'
).sort_values(by='이용시간', ascending=False).head()

bicycle_time.rename({'이용시간' : '평균이용시간'}, axis=1, inplace=True)

bicycle_time.plot()

# 자전거별 평균 이용거리 선그래프를 출력하세요
bicycle_distance = bicycle.pivot_table(
    index = '자전거번호',
    values = '이용거리',
    aggfunc = 'mean'
).sort_values(by='이용거리', ascending=False).head(5)

bicycle_distance.rename({'이용거리' : '평균이용거리'}, axis=1, inplace=True)

bicycle_distance.plot()

# 대여건수 1등과 꼴등 대여소의 월별 평균 대여건수를 선그래프로 출력하세요. X축은 월
# 대여소 전체 평균 대여건수의 선그래프를 추가하세요

bi = bicycle.pivot_table(
    index = '대여소명',
    values = '이용시간',
    columns = 'month',
    aggfunc = 'count'
).fillna(0)
bi.head(10)

total = 0
mean_month = []
for month in bi.columns:  
  for idx in bi.index:
    total += np.sum(bi.loc[idx, month])
  mean_month.append(round(total / len(bi), 1))
  mean = 0

mean_month

total_rent = []
for idx in bi.index:
  total_rent.append(np.sum(bi.loc[idx, :]))
len(total_rent)

bi['total'] = total_rent

bi.head()

rent_low = bi.sort_values(by='total').head(1)
rent_low

rent_top = bi.sort_values(by='total', ascending=False).head(1)
rent_top

rent = rent_low.append(rent_top)
rent

rent.drop('total', axis=1, inplace=True)
rent

rent1 = rent.T
rent1['전체평균'] = mean_month
rent1

rent1.plot()

# 대여건수 1등과 꼴등 자전거의 월별 평균 대여건수를 선그래프로 출력하세요. X축은 월
# 자전거 전체 평균 대여건수의 선그래프를 추가하세요

bi_2 = bicycle.pivot_table(
    index = '자전거번호',
    values = '이용시간',
    columns = 'month',
    aggfunc = 'count'
).fillna(0)
bi_2.head(7)

len(bi_2)

total = 0
total_month = []
for idx in bi_2.index:
  for month in bi_2.columns:  
    total += np.sum(bi_2.loc[idx, month])
  total_month.append(total)
  total = 0

len(total_month)

bi_2['total_month'] = total_month
bi_2.head()

bicycle_low = bi_2.sort_values(by='total_month').head(1)
bicycle_low

bicycle_top = bi_2.sort_values(by='total_month', ascending=False).head(1)
bicycle_top

bicycle1 = bicycle_low.append(bicycle_top)
bicycle1.drop({'total_month'}, axis=1, inplace=True)
bicycle2 = bicycle1.T
bicycle2

bi_2.drop({'total_month'}, axis=1, inplace=True)

bi_2t = bi_2.T
bi_2t

len(bi_2t.columns)



total = 0
total_bi_month = []
for idx in bi_2t.index:
  for month in bi_2t.columns:  
    total += np.sum(bi_2t.loc[idx, month])
  total_bi_month.append(total / len(bi_2t.columns))
  total = 0

len(total_bi_month)

bicycle2['total'] = total_bi_month
bicycle2

bicycle2.plot()

bicycle.head()

# 평일 요일(월화수목금)별 평균 대여량을 선그래프로 출력하세요. X축은 평일 요일

bi_3 = bicycle.pivot_table(
    index = 'week',
    values = 'day'
).reindex(weeks)
bi_3.drop(['Saturday', 'Sunday'], inplace=True)
bi_3.rename({'day' : '평균 대여량'}, axis=1, inplace=True)
bi_3.plot()

# 월별 주말의 평균 대여량을 선그래프로 출력하세요. X축은 월
bi_4 = bicycle.pivot_table(
    index = 'month',
    values = 'day',
    columns = 'week'
)
bi_4.drop(['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'], axis=1, inplace=True)
bi_4.plot()

# 아래는 년월입력시 해당 월의 전체의 날씨와 평균기온, 최고기온, 최저기온, 평균운량, 일강수량을 반환하는 함수이다
def get_weather(year, month, debug=False):
  '''
    year와 month에 해당하는 날짜의 맑음, 비, 평균기온, 최고기온, 최저기온, 평균운량, 일강수량 정보를 DataFrame으로 반환한다
  '''
  import pandas as pd
  url=f"https://www.weather.go.kr/w/obs-climate/land/past-obs/obs-by-day.do?stn=108&yy={year}&mm={month}&obs=1"
  w = pd.read_html(url, encoding="utf-8")
  평균기온=[]
  최고기온=[]
  최저기온=[]
  평균운량=[]
  일강수량=[]
  w_info=[]
  for i in range(1, len(w[1]), 2): #날씨정보는 홀수번째 행에 저장중.
    day_weather = w[1].loc[i] #홀수번째행 추출
    for wt in day_weather : #홀수번째 행의 각 칼럼 추출
      if pd.isna(wt): # 칼럼에 값이 없으면 다음 칼럼으로
        continue
      w_info.append(wt) # 칼럼에 값이 있으면 w_info에 저장
      wt_sp = wt.split()
      평균기온.append(wt_sp[0].split(":")[1].split("℃")[0])
      최고기온.append(wt_sp[1].split(":")[1].split("℃")[0])
      최저기온.append(wt_sp[2].split(":")[1].split("℃")[0])
      평균운량.append(wt_sp[3].split(":")[1])
      일강수량.append(wt_sp[4].split(":")[1])
      일강수량 = [ "0" if rain.strip()=="" or rain.endswith("0.0mm") else rain.split("mm")[0] for rain in 일강수량 ]
  if debug: # 디버그 옵션이 True이면 중간 결과물 출력
    display(w_info)
    print("날씨정보 길이:",len(w_info))
    display("일강수량:",일강수량)
  w_info2=[] # 날씨만 담을 리스트
  for wi in w_info:
    # print(wi.split()[-1])
    if not wi.endswith("mm"): # 정보글자가 강수량인 mm로 안끝나면 맑음
      w_info2.append("맑음")
      continue
    if wi.split(":")[-1]=="0.0mm": # 정보글자가 0.0mm로 안끝나면 맑음
      w_info2.append("맑음")
      continue
    w_info2.append("비") # 강수량 정보가 있으면 비
  if debug:
    display(w_info2)
  date_info2 = [] # 날짜정보 저장용  yyyy-mm-dd
  for i in range(1, len(w_info2)+1):
    date_info2.append( f"{year}-{month:02d}-{i:02d}"   )
  if debug:
    display(date_info2)
  weather_info = pd.DataFrame(
      [date_info2,평균기온,최고기온,최저기온,평균운량,일강수량, w_info2], 
      index=["날짜","평균기온","최고기온","최저기온","평균운량","일강수량","날씨"],
      dtype=float).T
  weather_info["평균기온"]=weather_info["평균기온"].astype(float)
  weather_info["최고기온"]=weather_info["최고기온"].astype(float)
  weather_info["최저기온"]=weather_info["최저기온"].astype(float)
  weather_info["평균운량"]=weather_info["평균운량"].astype(float)
  weather_info["일강수량"]=weather_info["일강수량"].astype(float)
  return weather_info

# 사용예 2015년 9월 날씨 추출
wt = get_weather(2015,9) 
display(wt)
display(wt.info())

wt10 = get_weather(2015,10)
wt11 = get_weather(2015,11)
wt12 = get_weather(2015,12)

wt12.info()

# 날씨정보를 추출하여 bicycle과 연결하세요

bicycle['대여일시'] = pd.to_datetime(bicycle['대여일시']).dt.date
bicycle['대여일시'] = pd.to_datetime(bicycle['대여일시'])

wt['날짜'] = pd.to_datetime(wt['날짜'])
wt10['날짜'] = pd.to_datetime(wt10['날짜'])
wt11['날짜'] = pd.to_datetime(wt11['날짜'])
wt12['날짜'] = pd.to_datetime(wt12['날짜'])

wt = wt.append(wt10, ignore_index=True)
wt = wt.append(wt11, ignore_index=True)
wt = wt.append(wt12, ignore_index=True)

wt.info()

wt1 = wt.rename({'날짜': '대여일시'}, axis=1)

wt1.head()

bicycle_wt = pd.merge(bicycle, wt1, how='outer', on='대여일시')
bicycle_wt.head()

bicycle_wt.info()

bicycle_wt = bicycle_wt.dropna()

bicycle_wt.info()

# 월별 날씨(맑음,비)별 평균 대여량을 출력하세요. X축은 월
bicycle_wt.pivot_table(
    index = 'month',
    values = 'day',
    columns = '날씨',
    aggfunc = 'count'
).fillna(0)

# 월별 날씨(맑음,비)별 평균 대여량을 선그래프로 출력하세요. X축은 월
bicycle_wt.pivot_table(
    index = 'month',
    values = 'day',
    columns = '날씨',
    aggfunc = 'count'
).fillna(0).plot()

# 날씨(맑음,비)별 평균 대여량이 가장 많은 대여소 top 10의 평균 대여량을 선그래프로 출력하세요. X축은 대여소명

bicycle_wt_total = bicycle_wt.pivot_table(
    index = '대여소명',
    values = 'day',
    columns = '날씨',
    aggfunc = 'count'
)

total = 0
total_rent_list = []
for idx in bicycle_wt_total.index:
  total = np.sum(bicycle_wt_total.loc[idx, :])
  total_rent_list.append(total)

len(total_rent_list)

bicycle_wt_total['total'] = total_rent_list

bi_w_1 = bicycle_wt_total.sort_values(by='total', ascending=False).head(10)

bi_w_1.drop({'total'}, axis=1, inplace=True)

bi_w_1.plot()

# 월별 평균기온과 최고 기온과 평균 대여량의 선그래프를 출력하세요. X축은 월
rent_month = bicycle_wt.pivot_table(
    index = 'month',
    values = 'day',
    aggfunc = 'mean'
)

temp_month = bicycle_wt.pivot_table(
    index = 'month',
    values = ['평균기온', '최고기온'],
    aggfunc = 'mean'
)

labels = ['평균대여량', '최고기온','평균기온']

plt.plot(
    rent_month,
    label = '평균대여량'
)

plt.plot(
    temp_month
)

plt.legend(labels)
plt.xlabel('월')
plt.ylabel('대여량 및 온도')