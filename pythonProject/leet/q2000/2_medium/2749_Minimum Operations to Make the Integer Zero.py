class Solution:
	def makeTheIntegerZero(self, num1: int, num2: int) -> int:
		for i in range(1, 60):
			num1 -= num2

			if num1 >= 0 and num1.bit_count() <= i <= num1:
				return i
		return -1


"""
k 횟수의 계산을 할수록 num2 값이 누적된다.
num1 = num1 - (2^i_1 + num2) - (2^i_2 + num2) + ... => num1 - (2^i_... + k * num2) = 0 
			=> num1 - k*num2 = 2^(i_1) + 2^(i_2) + ...

2 ^ i = [1, 2, 4, 8, 16 ...] = bin() => [1, 10, 100, 1000, 10000]
---
if num1 = 3, num2 = -2
i = 1, 3 - (-2) = 5 -> 0b101 ex) 2^2 = 4, 5-4 = 1 => 0b001 
i = 2, 5 - (-2) = 7 -> 0b111 ex) (4, 2) = 7-6 = 1 => 0b001 
i = 3, 7 - (-2) = 9 -> 0b1001 ex) (8=(4, 4), 1) = 9 - 9 = 0 => 0b000
---
num1 >= 0 : 위 식의 조건에서 2^(i_1)+2^(i_2)+... 부분은 무조건 양수 값만 존재한다.
num1.bit_count() <= i : 비트의 최소 계산을 만족
i <= num1 : 더 이상 계산을 할 수 없음 	1) i=3, num1=2=>0b10 ->(2 -1-1-1) = -1
																	2) i=9 num1=8=>0b1000 -> (8 - 1*9) = -1
																	이진법 비트		8 = 2^3, (3+1)bit, 4*2=8 최대 8번 가능
																							9 = 2^3+2^0, 8+1=9 최대 9번 가능
"""
